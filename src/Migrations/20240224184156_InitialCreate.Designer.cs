// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace cycling_project_web_api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240224184156_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("App.EntityModels.MetaTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("MetaTeam");
                });

            modelBuilder.Entity("App.EntityModels.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Nation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("App.EntityModels.RaceEdition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("RaceEditionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("RaceId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<short>("Year")
                        .HasColumnType("Int2");

                    b.HasKey("Id");

                    b.HasIndex("RaceId");

                    b.ToTable("RaceEditions");
                });

            modelBuilder.Entity("App.EntityModels.Rider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Nation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Riders");
                });

            modelBuilder.Entity("App.EntityModels.RiderTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("End")
                        .HasColumnType("date");

                    b.Property<int>("RiderId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Start")
                        .HasColumnType("date");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RiderId");

                    b.HasIndex("TeamId");

                    b.ToTable("RiderTeams");
                });

            modelBuilder.Entity("App.EntityModels.Stage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("Distance")
                        .HasColumnType("integer");

                    b.Property<int>("RaceEditionId")
                        .HasColumnType("integer");

                    b.Property<short>("StageNumber")
                        .HasColumnType("Int2");

                    b.Property<string>("StageType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("RaceEditionId");

                    b.ToTable("Stages");
                });

            modelBuilder.Entity("App.EntityModels.StageIndividualResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<short>("BonusPointObtained")
                        .HasColumnType("Int2");

                    b.Property<short>("ClimbingPointObtained")
                        .HasColumnType("Int2");

                    b.Property<int>("FinishTime")
                        .HasColumnType("integer");

                    b.Property<short>("Placement")
                        .HasColumnType("Int2");

                    b.Property<int>("RiderId")
                        .HasColumnType("integer");

                    b.Property<short>("SprintPointObtained")
                        .HasColumnType("Int2");

                    b.Property<int>("StageFinishStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("StageId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RiderId");

                    b.HasIndex("StageFinishStatusId");

                    b.HasIndex("StageId");

                    b.ToTable("StageIndividualResult");
                });

            modelBuilder.Entity("App.EntityModels.StageTeamResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FinishTime")
                        .HasColumnType("integer");

                    b.Property<short>("Placement")
                        .HasColumnType("Int2");

                    b.Property<int>("StageId")
                        .HasColumnType("integer");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StageId");

                    b.HasIndex("TeamId");

                    b.ToTable("StageTeamResult");
                });

            modelBuilder.Entity("App.EntityModels.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MetaTeamId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<short>("Year")
                        .HasColumnType("Int2");

                    b.HasKey("Id");

                    b.HasIndex("MetaTeamId");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("app.EntityModels.StageFinishStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("StageFinishStatuses");
                });

            modelBuilder.Entity("App.EntityModels.RaceEdition", b =>
                {
                    b.HasOne("App.EntityModels.Race", "Race")
                        .WithMany()
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Race");
                });

            modelBuilder.Entity("App.EntityModels.RiderTeam", b =>
                {
                    b.HasOne("App.EntityModels.Rider", "Rider")
                        .WithMany("RiderTeam")
                        .HasForeignKey("RiderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.EntityModels.Team", "Team")
                        .WithMany("RiderTeam")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rider");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("App.EntityModels.Stage", b =>
                {
                    b.HasOne("App.EntityModels.RaceEdition", "RaceEdition")
                        .WithMany()
                        .HasForeignKey("RaceEditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RaceEdition");
                });

            modelBuilder.Entity("App.EntityModels.StageIndividualResult", b =>
                {
                    b.HasOne("App.EntityModels.Rider", "Rider")
                        .WithMany()
                        .HasForeignKey("RiderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("app.EntityModels.StageFinishStatus", "StageFinishStatus")
                        .WithMany()
                        .HasForeignKey("StageFinishStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.EntityModels.Stage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rider");

                    b.Navigation("Stage");

                    b.Navigation("StageFinishStatus");
                });

            modelBuilder.Entity("App.EntityModels.StageTeamResult", b =>
                {
                    b.HasOne("App.EntityModels.Stage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.EntityModels.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stage");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("App.EntityModels.Team", b =>
                {
                    b.HasOne("App.EntityModels.MetaTeam", "MetaTeam")
                        .WithMany("Teams")
                        .HasForeignKey("MetaTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MetaTeam");
                });

            modelBuilder.Entity("App.EntityModels.MetaTeam", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("App.EntityModels.Rider", b =>
                {
                    b.Navigation("RiderTeam");
                });

            modelBuilder.Entity("App.EntityModels.Team", b =>
                {
                    b.Navigation("RiderTeam");
                });
#pragma warning restore 612, 618
        }
    }
}
